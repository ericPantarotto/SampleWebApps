@page "/Order/Create"
@inject HttpClient Http
@inject NavigationManager NavigationManager
<h3>Create</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodItems.Count == 0)
{
    <h4>Loading...</h4>
}
else
{
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary Model="@order"/>
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @onchange="FoodItemChange" class="form-control">
            <option value="">Select a meal...</option>/>
            @foreach (var f in foodItems)
            {
                <option value="@f.Id">@f.Title</option> 
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="order.Quantity" class="form-control"/>
        <ValidationMessage For="@(()=> order.Quantity)" class="text-danger"/>
    </div>
       <div class="form-group">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="order.OrderName" class="form-control"/>
        <ValidationMessage For="@(()=> order.OrderName)" class="text-danger"/>
    </div>
    <div class="form-group">
        <input type="submit" class="btn btn-primary" value="Order Food"/>
    </div>
</EditForm>
}

@code {
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();
    private string errorString; 
    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        @* var foodItemsDirect = Http.GetFromJsonAsync<List<FoodModel>>("api/food"); *@

        HttpResponseMessage response = await Http.GetAsync("api/food");
        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();    
        }else
        {
            errorString = response.ReasonPhrase;
        }
    }

     private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;

        try
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/order", order);
            var contents = await response.Content.ReadFromJsonAsync<OrderCreateResultModel>();
            
            order = new OrderModel();
            NavigationManager.NavigateTo($"order/display/{contents.Id}");
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        } 
    }
    private void FoodItemChange(ChangeEventArgs e)
    {
        if (!String.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }

    }
}
